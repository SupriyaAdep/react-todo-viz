{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["dataFetchReducer","state","action","type","isLoading","isError","data","payload","Error","useHackerNewsApi","initialUrl","initialData","useState","url","setUrl","useReducer","dispatch","useEffect","didCancel","a","async","axios","result","fetchData","App","hits","doFetch","query","setQuery","onSubmit","event","preventDefault","value","onChange","target","map","item","key","objectID","href","title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAGMA,EAAmB,SAACC,EAAOC,GAC/B,OAAQA,EAAOC,MACb,IAAK,aACH,OAAO,eACFF,EADL,CAEEG,WAAW,EACXC,SAAS,IAEb,IAAK,gBACH,OAAO,eACFJ,EADL,CAEEG,WAAW,EACXC,SAAS,EACTC,KAAMJ,EAAOK,UAEjB,IAAK,gBACH,OAAO,eACFN,EADL,CAEEG,WAAW,EACXC,SAAS,IAEb,QACE,MAAM,IAAIG,QAGVC,EAAmB,SAACC,EAAYC,GAAiB,IAAD,EAC9BC,mBAASF,GADqB,mBAC7CG,EAD6C,KACxCC,EADwC,OAG1BC,qBAAWf,EAAkB,CACrDI,WAAW,EACXC,SAAS,EACTC,KAAMK,IAN4C,mBAG7CV,EAH6C,KAGtCe,EAHsC,KA4BpD,OAnBAC,qBAAU,WACR,IAAIC,GAAY,EAgBhB,OAfkB,mBAAAC,EAAAC,OAAA,uDAChBJ,EAAS,CAAEb,KAAM,eADD,oBAAAgB,EAAA,MAGOE,IAAMR,IAHb,OAGRS,EAHQ,OAITJ,GACHF,EAAS,CAAEb,KAAM,gBAAiBI,QAASe,EAAOhB,OALtC,gDAQTY,GACHF,EAAS,CAAEb,KAAM,kBATL,wDAalBoB,GAEO,kBAAOL,GAAY,KACzB,CAACL,IACG,CAACZ,EAAOa,IA0CFU,MAvCf,WAAgB,IAAD,EACmCf,EAC9C,mDACA,CACEgB,KAAM,KAJG,0BACJnB,EADI,EACJA,KAAMF,EADF,EACEA,UAAWC,EADb,EACaA,QAAWqB,EADxB,OAOad,mBAAS,SAPtB,mBAONe,EAPM,KAOCC,EAPD,KASb,OACE,oCACE,0BACEC,SAAU,SAAAC,GACRJ,EAAQ,6CAAD,OAA8CC,IACrDG,EAAMC,mBAGR,2BACE5B,KAAK,OACL6B,MAAOL,EACPM,SAAU,SAAAH,GAAK,OAAIF,EAASE,EAAMI,OAAOF,UAE3C,4BAAQ7B,KAAK,UAAb,WAEDE,GAAW,yDACXD,EACC,4CAEA,4BACGE,EAAKmB,KAAKU,KAAI,SAAAC,GAAI,OACjB,wBAAIC,IAAKD,EAAKE,UACZ,uBAAGC,KAAMH,EAAKvB,KAAMuB,EAAKI,cC9EnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.93b98705.chunk.js","sourcesContent":["import React, { useState, useEffect, useReducer } from 'react';\nimport axios from 'axios';\n\nconst dataFetchReducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_INIT':\n      return {\n        ...state,\n        isLoading: true,\n        isError: false\n      };\n    case 'FETCH_SUCCESS':\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        data: action.payload\n      };\n    case 'FETCH_FAILURE':\n      return {\n        ...state,\n        isLoading: false,\n        isError: true\n      };\n    default:\n      throw new Error();\n  }\n};\nconst useHackerNewsApi = (initialUrl, initialData) => {\n  const [url, setUrl] = useState(initialUrl);\n\n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    isLoading: false,\n    isError: false,\n    data: initialData\n  });\n\n  useEffect(() => {\n    let didCancel = false;\n    const fetchData = async () => {\n      dispatch({ type: 'FETCH_INIT' });\n      try {\n        const result = await axios(url);\n        if (!didCancel) {\n          dispatch({ type: 'FETCH_SUCCESS', payload: result.data });\n        }\n      } catch (error) {\n        if (!didCancel) {\n          dispatch({ type: 'FETCH_FAILURE' });\n        }\n      }\n    };\n    fetchData();\n\n    return () => (didCancel = true);\n  }, [url]);\n  return [state, setUrl];\n};\n\nfunction App() {\n  const [{ data, isLoading, isError }, doFetch] = useHackerNewsApi(\n    'https://hn.algolia.com/api/v1/search?query=redux',\n    {\n      hits: []\n    }\n  );\n  const [query, setQuery] = useState('redux');\n\n  return (\n    <>\n      <form\n        onSubmit={event => {\n          doFetch(`http://hn.algolia.com/api/v1/search?query=${query}`);\n          event.preventDefault();\n        }}\n      >\n        <input\n          type=\"text\"\n          value={query}\n          onChange={event => setQuery(event.target.value)}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      {isError && <div>Something went wrong ...</div>}\n      {isLoading ? (\n        <div>Loading ...</div>\n      ) : (\n        <ul>\n          {data.hits.map(item => (\n            <li key={item.objectID}>\n              <a href={item.url}>{item.title}</a>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}